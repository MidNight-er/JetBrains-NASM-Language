/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.nasmlanguage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.nasmlanguage.psi.NASMTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_NASMLexer.flex</tt>
 */
public class _NASMLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\103\1\105\1\100\1\15\1\0\1\101\1\112\1\113\1"+
    "\117\1\115\1\114\1\116\1\25\1\0\1\75\1\27\1\32\1\31\1\73\1\72\1\30\1\74\1"+
    "\63\1\76\1\106\1\3\3\0\1\104\1\105\1\23\1\26\1\10\1\17\1\4\1\21\1\33\1\77"+
    "\1\12\1\107\1\36\1\16\1\22\1\14\1\13\1\34\1\5\1\24\1\7\1\11\1\6\2\107\1\20"+
    "\1\35\1\107\1\110\1\102\1\111\1\0\1\107\1\0\1\57\1\46\1\54\1\42\1\40\1\66"+
    "\1\60\1\62\1\65\1\67\1\70\1\56\1\47\1\55\1\50\1\61\1\44\1\37\1\41\1\45\1\64"+
    "\1\51\1\43\1\53\1\71\1\52\12\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1"+
    "\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\10\4\1\5\3\4\1\6"+
    "\1\4\2\7\26\4\2\7\1\10\1\1\1\11\1\1"+
    "\1\6\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\3\4\1\23\11\4\11\0\4\4\3\6"+
    "\1\4\1\0\1\7\6\4\1\24\5\4\1\24\11\4"+
    "\2\25\1\4\1\24\6\4\1\26\2\4\1\24\4\4"+
    "\1\26\13\4\1\24\12\4\1\24\11\4\1\26\1\4"+
    "\3\26\1\4\1\26\1\4\1\26\3\0\3\7\1\27"+
    "\1\0\1\30\3\0\1\31\11\4\1\32\1\4\14\0"+
    "\4\4\3\6\4\4\1\26\2\4\1\26\5\4\1\26"+
    "\12\4\2\26\4\4\1\26\1\4\1\32\1\26\2\4"+
    "\2\26\3\4\2\26\2\4\1\7\1\0\13\4\11\0"+
    "\1\33\1\0\4\4\2\6\1\34\5\4\1\26\2\4"+
    "\1\35\1\4\1\26\2\4\1\26\1\4\3\26\4\4"+
    "\15\0\3\4\1\36\1\37\6\4\7\0\1\40\1\0"+
    "\4\4\1\41\2\0\1\42\1\26\1\0\1\43\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730"+
    "\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0"+
    "\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30"+
    "\0\u0c80\0\u0cd0\0\u0190\0\u0d20\0\u0d70\0\u0dc0\0\120\0\u0e10"+
    "\0\u0e60\0\120\0\120\0\120\0\120\0\120\0\120\0\120"+
    "\0\120\0\120\0\u0eb0\0\u0f00\0\u0f50\0\120\0\u0fa0\0\u0ff0"+
    "\0\u1040\0\u1090\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220\0\u1270"+
    "\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0"+
    "\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770"+
    "\0\u17c0\0\120\0\u1810\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0"+
    "\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u0190\0\u1bd0"+
    "\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50"+
    "\0\u0190\0\u07d0\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030"+
    "\0\u2080\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0"+
    "\0\u2300\0\u2350\0\u1220\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0"+
    "\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760"+
    "\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990\0\u29e0"+
    "\0\u2a30\0\u15e0\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0\0\u2c10"+
    "\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2da0\0\u0190\0\u2df0"+
    "\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u05f0\0\u2fd0\0\u2f80"+
    "\0\u3020\0\u3070\0\u0e60\0\u0dc0\0\120\0\u30c0\0\u0e10\0\u3110"+
    "\0\u0190\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u3340"+
    "\0\u3390\0\u33e0\0\u0190\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570"+
    "\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750\0\u37a0\0\u37f0"+
    "\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0"+
    "\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20\0\u3f70"+
    "\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0"+
    "\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380\0\u43d0\0\u4420\0\u4470"+
    "\0\u44c0\0\u4510\0\u3ca0\0\u4560\0\u45b0\0\u4600\0\u4650\0\u1ef0"+
    "\0\u46a0\0\u2620\0\u2e90\0\u46f0\0\u2fd0\0\u4740\0\u4790\0\u47e0"+
    "\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0\0\u4a10\0\u4a60"+
    "\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0"+
    "\0\u4d30\0\u4d80\0\120\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0\0\u4f10"+
    "\0\u4f60\0\u4fb0\0\u0e60\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140"+
    "\0\u5190\0\u51e0\0\u5230\0\u0190\0\u5280\0\u52d0\0\u2df0\0\u5320"+
    "\0\u1c70\0\u5370\0\u42e0\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u5500"+
    "\0\u5550\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780"+
    "\0\u57d0\0\u5820\0\u5870\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u5a00"+
    "\0\u5a50\0\u0e60\0\u0e60\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0"+
    "\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u5e60"+
    "\0\120\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u0190\0\u6040"+
    "\0\u6090\0\120\0\u60e0\0\u6130\0\120\0\u6180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\6\1\15\1\16\3\6\1\17"+
    "\1\20\1\6\1\21\1\22\1\23\3\24\1\25\3\6"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\6\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\6\1\24\1\47\1\50\1\51\1\52"+
    "\1\6\1\53\3\24\1\54\1\24\1\6\1\55\1\56"+
    "\1\57\1\60\1\61\1\2\1\62\1\6\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\121\0\2\3"+
    "\115\0\1\4\1\0\116\4\4\0\1\6\1\73\6\6"+
    "\1\74\1\0\2\6\1\75\4\6\1\61\16\6\1\73"+
    "\6\6\1\75\1\6\1\74\22\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\52\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\3\6\1\77"+
    "\5\6\1\0\7\6\1\61\6\6\1\100\4\6\1\77"+
    "\17\6\1\100\16\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\1\101\4\6\1\102\3\6\1\0\7\6\1\61"+
    "\12\6\1\101\4\6\1\102\32\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\7\6\1\103\1\6\1\0\7\6"+
    "\1\61\6\6\1\104\13\6\1\103\10\6\1\104\16\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\6\6\1\105"+
    "\2\6\1\0\7\6\1\61\37\6\1\105\12\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\4\6"+
    "\1\106\2\6\1\61\21\6\1\106\30\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\6\6\1\107"+
    "\1\61\11\6\1\107\40\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\1\110\1\0\1\111\1\112\2\0\1\113"+
    "\4\0\1\114\1\115\1\0\1\116\1\117\1\120\12\0"+
    "\1\120\1\110\1\112\1\114\4\0\1\116\3\0\1\115"+
    "\3\0\1\117\4\0\1\111\1\113\36\0\6\6\1\121"+
    "\2\6\1\0\7\6\1\61\37\6\1\121\12\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\7\6\1\122\1\6"+
    "\1\0\7\6\1\61\22\6\1\122\27\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\1\123\6\6"+
    "\1\61\1\124\17\6\1\124\7\6\1\123\21\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\5\61\1\125\3\61"+
    "\1\0\1\61\1\126\6\61\1\127\13\61\1\126\2\61"+
    "\1\125\1\127\32\61\3\0\2\61\1\76\1\61\14\0"+
    "\6\6\1\130\2\6\1\0\7\6\1\61\37\6\1\130"+
    "\12\6\1\61\3\0\2\61\1\76\1\6\14\0\1\131"+
    "\3\0\1\131\6\0\1\131\1\0\1\131\1\0\1\131"+
    "\2\0\1\131\1\23\3\24\5\0\1\131\1\0\1\131"+
    "\3\0\1\131\5\0\1\131\2\0\1\131\2\0\1\132"+
    "\1\24\2\0\1\131\2\0\1\132\3\24\1\23\1\24"+
    "\25\0\1\131\3\0\1\131\6\0\1\131\1\0\1\131"+
    "\1\0\1\131\2\0\1\131\4\24\5\0\1\131\1\0"+
    "\1\131\3\0\1\131\5\0\1\131\2\0\1\131\2\0"+
    "\1\132\1\24\2\0\1\131\3\0\5\24\25\0\11\6"+
    "\1\0\1\133\5\6\1\134\1\61\11\6\1\134\16\6"+
    "\1\133\21\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\12\6\1\135\1\6\1\136"+
    "\5\6\1\137\3\6\1\140\23\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\1\6\1\73\6\6\1\74\1\0"+
    "\2\6\1\75\4\6\1\61\13\6\1\141\1\142\1\6"+
    "\1\73\1\6\1\143\4\6\1\75\1\144\1\145\1\6"+
    "\1\144\20\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\1\101\4\6\1\102\3\6\1\0\7\6\1\61\12\6"+
    "\1\146\1\147\1\6\1\150\1\6\1\151\1\152\5\6"+
    "\1\153\2\6\1\154\1\6\1\147\1\155\1\6\1\152"+
    "\1\147\3\6\1\156\6\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\11\6\1\157"+
    "\1\160\1\147\1\161\1\162\3\161\4\6\1\147\2\6"+
    "\1\147\1\163\2\6\1\147\2\6\1\164\12\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\22\6\1\165\27\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\15\6\1\32"+
    "\34\6\1\61\3\0\2\61\1\76\1\6\14\0\6\6"+
    "\1\105\2\6\1\0\7\6\1\61\11\6\1\166\1\167"+
    "\11\6\1\170\12\6\1\105\12\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\6\6\1\130\2\6\1\0\7\6"+
    "\1\61\12\6\1\171\1\172\3\6\1\173\2\6\1\174"+
    "\1\6\1\175\1\147\2\6\1\176\2\6\2\147\2\6"+
    "\1\130\3\6\1\177\6\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\7\6\1\122\1\6\1\0\7\6\1\61"+
    "\21\6\1\200\1\201\13\6\1\202\13\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\6\6\1\107"+
    "\1\61\11\6\1\203\24\6\1\204\13\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\22\6\1\205\3\6\1\206\1\6\1\207\1\210\20\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\7\6\1\103"+
    "\1\6\1\0\7\6\1\61\6\6\1\104\2\6\1\211"+
    "\1\6\1\147\1\212\1\213\1\214\1\6\1\215\1\216"+
    "\1\103\2\6\1\147\2\6\1\217\1\220\1\6\1\221"+
    "\1\147\15\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\12\6\1\222\7\6\1\223"+
    "\27\6\1\61\3\0\2\61\1\76\1\6\14\0\6\6"+
    "\1\121\2\6\1\0\7\6\1\61\12\6\1\224\2\225"+
    "\5\6\1\226\1\6\1\170\4\6\1\227\1\225\4\6"+
    "\1\121\1\225\11\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\1\123\6\6\1\61\1\124\13\6"+
    "\1\230\3\6\1\124\4\6\1\147\1\6\1\231\1\232"+
    "\1\233\2\6\1\147\15\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\1\133\5\6\1\134\1\61"+
    "\11\6\1\134\1\6\1\147\14\6\1\133\21\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\12\6\1\234\1\6\1\235\5\6\1\236\13\6"+
    "\1\237\13\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\3\6\1\77\5\6\1\0\7\6\1\61\6\6\1\100"+
    "\4\6\1\77\1\240\16\6\1\100\16\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\4\6\1\106"+
    "\2\6\1\61\11\6\1\241\2\6\1\242\4\6\1\243"+
    "\5\6\1\244\22\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\13\6\1\147\36\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\11\6\1\245\1\246\1\247\4\6\1\250"+
    "\1\251\1\247\1\6\1\247\1\6\1\252\1\253\3\250"+
    "\1\254\16\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\1\131\3\0\1\131\6\0\1\131\1\255\1\131\1\0"+
    "\1\131\2\0\1\131\1\23\3\24\5\0\1\131\1\0"+
    "\1\256\3\0\1\257\4\0\1\255\1\131\2\0\1\131"+
    "\2\0\1\260\1\24\2\0\1\131\2\0\1\261\3\24"+
    "\1\23\1\24\1\255\24\0\11\61\1\0\11\61\4\262"+
    "\30\61\1\262\6\61\5\262\1\61\1\263\3\0\2\61"+
    "\1\76\1\61\10\0\101\264\1\265\1\266\15\264\102\267"+
    "\1\270\1\265\14\267\4\0\11\61\1\0\63\61\3\0"+
    "\2\61\1\76\1\61\14\0\2\6\1\271\6\6\1\0"+
    "\7\6\1\61\36\6\1\271\13\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\1\6\1\272\5\6"+
    "\1\61\14\6\1\272\35\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\5\6\1\273\3\6\1\0\7\6\1\61"+
    "\6\6\1\274\10\6\1\273\13\6\1\274\16\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\1\275\10\6\1\0"+
    "\7\6\1\61\12\6\1\275\37\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\6\6"+
    "\1\276\24\6\1\276\16\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\4\6\1\277\4\6\1\0\7\6\1\61"+
    "\5\6\1\300\20\6\1\277\3\6\1\300\17\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\6\6"+
    "\1\301\1\61\11\6\1\301\40\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\4\6\1\302\2\6"+
    "\1\61\21\6\1\302\30\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\2\6\1\303\6\6\1\0\7\6\1\61"+
    "\36\6\1\303\13\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\4\6\1\304\2\6\1\61\21\6"+
    "\1\304\30\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\6\6\1\274\24\6\1\274"+
    "\16\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\5\6\1\303\24\6\1\303\17\6"+
    "\1\61\3\0\2\61\1\76\1\6\24\0\1\305\40\0"+
    "\1\305\56\0\1\306\40\0\1\306\50\0\1\307\2\0"+
    "\1\310\33\0\1\310\16\0\1\307\47\0\1\311\2\0"+
    "\1\114\2\0\1\116\17\0\1\114\4\0\1\116\5\0"+
    "\1\311\46\0\1\312\33\0\1\312\71\0\1\313\4\0"+
    "\1\314\22\0\1\314\22\0\1\313\55\0\1\315\33\0"+
    "\1\315\47\0\1\316\31\0\1\316\62\0\1\317\6\0"+
    "\1\320\24\0\1\317\7\0\1\320\53\0\11\6\1\0"+
    "\7\6\1\61\1\321\17\6\1\321\31\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\1\6\1\322"+
    "\5\6\1\61\14\6\1\322\35\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\6\6\1\323\2\6\1\0\7\6"+
    "\1\61\37\6\1\323\12\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\3\6\1\324\5\6\1\0\7\6\1\61"+
    "\13\6\1\324\36\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\1\325\10\61\1\0\22\61\1\325\40\61\3\0"+
    "\2\61\1\76\1\61\14\0\11\61\1\0\5\61\1\326"+
    "\33\61\1\326\21\61\3\0\2\61\1\76\1\61\14\0"+
    "\3\61\1\327\5\61\1\0\23\61\1\327\37\61\3\0"+
    "\2\61\1\76\1\61\14\0\5\6\1\330\3\6\1\0"+
    "\7\6\1\61\17\6\1\330\32\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\1\131\3\0\1\131\6\0\1\131"+
    "\1\0\1\131\1\0\1\131\2\0\5\131\5\0\1\131"+
    "\1\0\1\131\3\0\1\131\5\0\1\131\2\0\1\131"+
    "\2\0\1\132\1\131\2\0\1\131\3\0\5\131\25\0"+
    "\7\6\1\331\1\6\1\0\7\6\1\61\22\6\1\331"+
    "\27\6\1\61\3\0\2\61\1\76\1\6\14\0\7\6"+
    "\1\332\1\6\1\0\7\6\1\61\22\6\1\332\27\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\13\6\1\333\3\6\1\247\13\6\1\334"+
    "\16\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\11\6\1\335\1\6\1\336\36\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\11\6\1\337\16\6\1\247\21\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\11\6\1\247\16\6\1\247\21\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\33\6\1\147\3\6\1\147\12\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\25\6"+
    "\1\147\11\6\1\147\12\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\25\6\1\147"+
    "\5\6\1\147\16\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\25\6\1\147\24\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\1\6\1\272\5\6\1\61\14\6\1\272\2\6\1\340"+
    "\32\6\1\61\3\0\2\61\1\76\1\6\14\0\4\6"+
    "\1\277\4\6\1\0\7\6\1\61\5\6\1\300\11\6"+
    "\1\341\6\6\1\277\3\6\1\300\17\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\31\6\1\342\20\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\6\6\1\301\1\61\1\6\4\147"+
    "\4\6\1\301\2\6\1\247\5\6\1\343\3\6\1\247"+
    "\10\6\1\247\4\6\4\147\2\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\20\6"+
    "\1\247\31\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\31\6\1\343\20\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\11\6\1\337\16\6\1\247\3\6\1\344\15\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\11\6\1\345\16\6\1\345\21\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\13\6\1\346\36\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\1\6\4\147"+
    "\41\6\2\147\2\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\26\6\1\247\23\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\13\6\1\247\15\6\1\247\20\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\23\6\1\247\26\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\11\6\1\347"+
    "\40\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\2\6\2\147\40\6\3\147\3\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\13\6\1\350\36\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\26\6"+
    "\1\351\23\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\25\6\1\352\24\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\11\6\1\247\3\6\1\353\22\6\1\247\11\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\11\6\1\247\1\6\1\247\12\6\1\247"+
    "\23\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\36\6\1\354\13\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\34\6\1\355\15\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\13\6\1\356\36\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\17\6\1\357\32\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\1\6"+
    "\4\147\37\6\4\147\2\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\1\6\1\322\5\6\1\61"+
    "\14\6\1\322\6\6\1\360\26\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\30\6"+
    "\1\337\21\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\17\6\1\361\32\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\11\6\1\247\40\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\34\6\1\222"+
    "\15\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\31\6\1\362\20\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\14\6\1\363\35\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\1\6\1\147\1\6"+
    "\2\147\21\6\1\364\16\6\1\147\1\6\1\147\2\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\16\6\1\250\33\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\14\6"+
    "\1\250\35\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\22\6\1\247\27\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\15\6\1\247\34\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\22\6\1\365"+
    "\3\6\1\247\4\6\1\366\16\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\14\6"+
    "\1\247\11\6\1\247\10\6\1\247\12\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\30\6\1\367\21\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\2\6\1\303\6\6\1\0\7\6\1\61\36\6"+
    "\1\370\13\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\32\6\1\247\17\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\17\6\1\247\13\6\1\247\16\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\13\6\1\247\15\6\1\371\20\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\13\6"+
    "\1\247\36\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\14\6\1\343\5\6\1\372"+
    "\27\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\34\6\1\344\15\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\14\6\1\247\5\6\1\373\3\6\1\337\23\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\14\6\1\374\35\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\13\6\2\247"+
    "\4\6\1\247\7\6\1\247\20\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\25\6"+
    "\1\350\24\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\12\6\1\251\37\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\33\6\1\375\16\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\13\6\1\376"+
    "\36\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\4\6\1\247\45\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\12\6\1\377\37\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\37\6\1\u0100\12\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\6\6\1\274\24\6\1\274\2\6\1\367"+
    "\13\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\13\6\1\u0101\3\6\1\u0102\6\6"+
    "\1\247\23\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\26\6\1\u0103\23\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\12\6\1\247\37\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\33\6\1\247"+
    "\16\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\25\6\1\u0104\24\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\12\6\2\247\4\6\1\250\1\6\1\247\1\6\1\247"+
    "\1\6\1\247\1\6\3\250\1\247\16\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\12\6\1\247\7\6\1\247\27\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\1\260\3\0\1\260\6\0\1\260"+
    "\1\0\1\260\1\0\1\260\2\0\5\260\5\0\1\260"+
    "\1\0\1\260\3\0\1\260\5\0\1\260\2\0\1\260"+
    "\3\0\1\260\2\0\1\260\3\0\5\260\25\0\1\131"+
    "\3\0\1\131\6\0\1\131\1\0\1\131\1\0\1\131"+
    "\2\0\1\131\1\u0105\3\131\5\0\1\131\1\0\1\131"+
    "\3\0\1\131\5\0\1\131\2\0\1\131\2\0\1\132"+
    "\1\131\2\0\1\131\3\0\3\131\1\u0105\1\131\50\0"+
    "\1\u0106\45\0\1\u0106\26\0\1\262\3\61\1\262\4\61"+
    "\1\0\1\61\1\262\1\61\1\262\1\61\1\262\2\61"+
    "\5\262\5\61\1\262\1\61\1\262\3\61\1\262\5\61"+
    "\1\262\2\61\1\262\3\61\1\262\2\61\1\262\3\61"+
    "\5\262\2\61\3\0\2\61\1\76\1\61\10\0\1\264"+
    "\1\0\116\264\1\267\1\0\116\267\4\0\3\6\1\u0107"+
    "\5\6\1\0\7\6\1\61\13\6\1\u0107\36\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\1\u0108\10\6\1\0"+
    "\7\6\1\61\12\6\1\u0108\37\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\7\6\1\u0109\1\6\1\0\7\6"+
    "\1\61\22\6\1\u0109\27\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\1\6\1\u010a"+
    "\1\6\1\u010b\46\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\1\u010c\10\6\1\0\7\6\1\61\12\6\1\u010c"+
    "\37\6\1\61\3\0\2\61\1\76\1\6\14\0\5\6"+
    "\1\u010d\3\6\1\0\7\6\1\61\17\6\1\u010d\32\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\4\6\1\u010e\2\6\1\61\21\6\1\u010e\30\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\2\6\1\u010f\6\6"+
    "\1\0\7\6\1\61\36\6\1\u010f\13\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\4\6\1\u0110"+
    "\2\6\1\61\21\6\1\u0110\30\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\1\u0111\10\6\1\0\7\6\1\61"+
    "\12\6\1\u0111\37\6\1\61\3\0\2\61\1\76\1\6"+
    "\27\0\1\u0112\22\0\1\u0112\74\0\1\u0113\22\0\1\u0113"+
    "\103\0\1\u0114\17\0\1\u0114\75\0\1\u0115\12\0\1\u0115"+
    "\70\0\1\u0116\43\0\1\u0116\64\0\1\u0117\44\0\1\u0117"+
    "\50\0\1\314\22\0\1\314\61\0\1\u0118\33\0\1\u0118"+
    "\67\0\1\u0119\43\0\1\u0119\52\0\1\u011a\31\0\1\u011a"+
    "\112\0\1\u011b\24\0\1\u011b\47\0\1\u011c\33\0\1\u011c"+
    "\56\0\11\6\1\0\6\6\1\u011d\1\61\11\6\1\u011d"+
    "\40\6\1\61\3\0\2\61\1\76\1\6\14\0\2\6"+
    "\1\u011e\6\6\1\0\7\6\1\61\36\6\1\u011e\13\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\5\6\1\u011f\24\6\1\u011f\17\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\7\6\1\u0120\1\6"+
    "\1\0\7\6\1\61\22\6\1\u0120\27\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\61\1\0\2\61\1\u0121"+
    "\32\61\1\u0121\25\61\3\0\2\61\1\76\1\61\14\0"+
    "\5\61\1\u0122\3\61\1\0\27\61\1\u0122\33\61\3\0"+
    "\2\61\1\76\1\61\14\0\3\61\1\u0123\5\61\1\0"+
    "\23\61\1\u0123\37\61\3\0\2\61\1\76\1\61\14\0"+
    "\3\6\1\303\5\6\1\0\7\6\1\61\13\6\1\303"+
    "\36\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\1\u0124\17\6\1\u0124\31\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\2\6\1\u0125\6\6"+
    "\1\0\7\6\1\61\36\6\1\u0125\13\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\14\6\5\161\31\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\12\6\1\247\11\6"+
    "\1\247\2\6\1\u0126\22\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\31\6\1\354"+
    "\20\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\12\6\1\u0127\37\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\25\6\1\247\24\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\12\6\1\205\37\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\12\6\2\247\4\6\1\250\1\6\1\247"+
    "\1\6\1\247\1\6\1\247\1\253\3\250\1\254\16\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\33\6\1\u0128\16\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\13\6"+
    "\1\u0129\36\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\40\6\1\247\11\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\14\6\1\247\10\6\1\247\24\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\11\6\1\u012a\14\6\1\u012b\23\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\14\6"+
    "\1\u012c\35\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\17\6\1\247\32\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\27\6\1\350\22\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\17\6\1\205"+
    "\32\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\31\6\1\251\20\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\27\6\1\363\22\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\37\6\1\247\12\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\11\6\1\247\7\6\1\u012d\15\6\1\247"+
    "\12\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\12\6\1\u012c\37\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\13\6\1\u012e\4\6\1\u012f\3\6\1\373\2\6\1\u0130"+
    "\22\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\13\6\1\u0101\36\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\17\6\1\u0131\32\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\14\6\1\247\35\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\3\6\1\240\46\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\23\6"+
    "\1\341\26\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\13\6\1\u0129\11\6\1\u0132"+
    "\24\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\30\6\1\247\21\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\37\6\1\363\12\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\23\6\1\u012f\26\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\33\6\1\334\16\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\27\6"+
    "\1\247\22\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\26\6\1\351\2\6\1\u0133"+
    "\6\6\1\u0134\11\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\34\6\1\u0135\15\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\11\6\1\0"+
    "\7\6\1\61\17\6\1\u0134\32\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\11\6\1\0\7\6\1\61\14\6"+
    "\2\247\2\6\1\247\31\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\24\6\1\247"+
    "\25\6\1\61\3\0\2\61\1\76\1\6\37\0\1\u0106"+
    "\16\0\1\132\26\0\1\u0106\26\0\5\6\1\102\3\6"+
    "\1\0\7\6\1\61\17\6\1\102\32\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\6\6\1\u011f"+
    "\1\61\11\6\1\u011f\40\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\6\6\1\u0136\1\61\11\6"+
    "\1\u0136\40\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\2\6\1\303\47\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\4\6\1\303\45\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\6\6\1\u0137\1\61\11\6"+
    "\1\u0137\40\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\6\6\1\u0138\2\6\1\0\7\6\1\61\37\6\1\u0138"+
    "\12\6\1\61\3\0\2\61\1\76\1\6\14\0\1\u0139"+
    "\10\6\1\0\7\6\1\61\12\6\1\u0139\37\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\4\6\1\303\4\6"+
    "\1\0\7\6\1\61\26\6\1\303\23\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\7\6\1\u011f\1\6\1\0"+
    "\7\6\1\61\22\6\1\u011f\27\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\3\6\1\161\5\6\1\0\7\6"+
    "\1\61\13\6\1\161\36\6\1\61\3\0\2\61\1\76"+
    "\1\6\32\0\1\u013a\1\0\1\u013b\12\0\1\u013b\7\0"+
    "\1\u013a\54\0\1\u013c\33\0\1\u013c\66\0\1\u013d\31\0"+
    "\1\u013d\66\0\1\u013e\5\0\1\u013f\35\0\1\u013e\1\0"+
    "\1\u013f\57\0\1\u0140\37\0\1\u0140\50\0\1\u013d\1\0"+
    "\1\u0141\1\u0142\26\0\1\u013d\3\0\1\u0141\17\0\1\u0142"+
    "\53\0\1\u0143\44\0\1\u0143\55\0\1\u0144\12\0\1\u0144"+
    "\72\0\1\u0145\52\0\1\u0145\55\0\1\u0146\33\0\1\u0146"+
    "\44\0\11\6\1\0\5\6\1\u0147\1\6\1\61\31\6"+
    "\1\u0147\20\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\1\u0148\6\6\1\61\30\6\1\u0148\21\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\10\6\1\303"+
    "\1\0\7\6\1\61\27\6\1\303\22\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\1\u0149\6\6"+
    "\1\61\30\6\1\u0149\21\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\5\61\1\u014a\3\61\1\0\27\61\1\u014a"+
    "\33\61\3\0\2\61\1\76\1\61\14\0\11\61\1\0"+
    "\5\61\1\u014b\33\61\1\u014b\21\61\3\0\2\61\1\76"+
    "\1\61\14\0\11\6\1\0\5\6\1\u014c\1\6\1\61"+
    "\31\6\1\u014c\20\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\6\6\1\303\24\6"+
    "\1\303\16\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\12\6\1\247\11\6\1\247"+
    "\25\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\12\6\1\363\37\6\1\61\3\0"+
    "\2\61\1\76\1\6\14\0\11\6\1\0\7\6\1\61"+
    "\32\6\1\225\17\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\14\6\3\247\1\6"+
    "\1\247\31\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\12\6\1\350\37\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\31\6\1\220\20\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\13\6\1\u014d"+
    "\36\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\7\6\1\61\14\6\3\247\1\6\1\247\4\6"+
    "\1\u0133\24\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\17\6\1\u014e\32\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\26\6\1\u014f\23\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\14\6\1\247"+
    "\1\6\1\247\33\6\1\61\3\0\2\61\1\76\1\6"+
    "\14\0\11\6\1\0\7\6\1\61\31\6\1\u0133\6\6"+
    "\1\u0134\11\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\5\6\1\303\3\6\1\0\7\6\1\61\17\6\1\303"+
    "\32\6\1\61\3\0\2\61\1\76\1\6\14\0\4\6"+
    "\1\u0150\4\6\1\0\7\6\1\61\26\6\1\u0150\23\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\7\6\1\u0151"+
    "\1\6\1\0\7\6\1\61\22\6\1\u0151\27\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\10\6\1\u0136\1\0"+
    "\7\6\1\61\27\6\1\u0136\22\6\1\61\3\0\2\61"+
    "\1\76\1\6\33\0\1\u0152\33\0\1\u0152\44\0\1\317"+
    "\33\0\1\317\100\0\1\u011b\44\0\1\u011b\42\0\1\u0153"+
    "\33\0\1\u0153\75\0\1\u0154\33\0\1\u0154\44\0\1\u0155"+
    "\33\0\1\u0155\65\0\1\u0156\55\0\1\u0156\46\0\1\u0157"+
    "\34\0\1\u0157\63\0\1\u0158\40\0\1\u0158\54\0\1\u0142"+
    "\52\0\1\u0142\45\0\1\u0159\34\0\1\u0159\102\0\1\u0155"+
    "\24\0\1\u0155\50\0\1\u015a\33\0\1\u015a\56\0\11\6"+
    "\1\0\6\6\1\u015b\1\61\11\6\1\u015b\40\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\1\303\10\6\1\0"+
    "\7\6\1\61\12\6\1\303\37\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\2\6\1\u015c\6\6\1\0\7\6"+
    "\1\61\36\6\1\u015c\13\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\1\303\6\6\1\61\30\6"+
    "\1\303\21\6\1\61\3\0\2\61\1\76\1\6\14\0"+
    "\11\6\1\0\7\6\1\61\42\6\1\247\7\6\1\61"+
    "\3\0\2\61\1\76\1\6\14\0\11\6\1\0\7\6"+
    "\1\61\16\6\1\247\33\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\34\6\1\u015d"+
    "\15\6\1\61\3\0\2\61\1\76\1\6\14\0\11\6"+
    "\1\0\5\6\1\u015e\1\6\1\61\31\6\1\u015e\20\6"+
    "\1\61\3\0\2\61\1\76\1\6\14\0\10\6\1\u015f"+
    "\1\0\7\6\1\61\27\6\1\u015f\22\6\1\61\3\0"+
    "\2\61\1\76\1\6\20\0\1\u0160\43\0\1\u0160\67\0"+
    "\1\u011b\12\0\1\u011b\71\0\1\u011b\33\0\1\u011b\66\0"+
    "\1\u011b\40\0\1\u011b\61\0\1\u0161\22\0\1\u0161\113\0"+
    "\1\u011b\31\0\1\u011b\33\0\1\u0162\33\0\1\u0162\63\0"+
    "\1\u011b\33\0\1\u011b\63\0\11\6\1\0\7\6\1\61"+
    "\7\6\1\303\33\6\1\303\6\6\1\61\3\0\2\61"+
    "\1\76\1\6\14\0\5\6\1\u0148\3\6\1\0\7\6"+
    "\1\61\17\6\1\u0148\32\6\1\61\3\0\2\61\1\76"+
    "\1\6\14\0\11\6\1\0\7\6\1\61\32\6\1\u0163"+
    "\17\6\1\61\3\0\2\61\1\76\1\6\14\0\3\6"+
    "\1\u0148\5\6\1\0\7\6\1\61\13\6\1\u0148\36\6"+
    "\1\61\3\0\2\61\1\76\1\6\34\0\1\u0164\12\0"+
    "\1\u0164\64\0\1\u0165\33\0\1\u0165\63\0\11\6\1\0"+
    "\7\6\1\61\1\6\1\u0166\33\6\1\152\14\6\1\61"+
    "\3\0\2\61\1\76\1\6\23\0\1\u011b\34\0\1\u011b"+
    "\53\0\11\6\1\0\7\6\1\61\2\6\1\152\47\6"+
    "\1\61\3\0\2\61\1\76\1\6\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\54\1\1\11\2\1\11\11\3\1\1\11"+
    "\11\1\11\0\10\1\1\0\1\11\122\1\3\0\4\1"+
    "\1\0\1\11\3\0\14\1\14\0\65\1\1\0\13\1"+
    "\11\0\1\11\1\0\35\1\15\0\13\1\7\0\1\11"+
    "\1\0\5\1\2\0\1\11\1\1\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _NASMLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NASMLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 36: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 37: break;
          case 3: 
            { return COMMENT;
            }
          case 38: break;
          case 4: 
            { return IDENTIFIER;
            }
          case 39: break;
          case 5: 
            { return PERCENT;
            }
          case 40: break;
          case 6: 
            { return LABEL;
            }
          case 41: break;
          case 7: 
            { return NUMBER;
            }
          case 42: break;
          case 8: 
            { return DOLLARSIGN;
            }
          case 43: break;
          case 9: 
            { return DIVIDE;
            }
          case 44: break;
          case 10: 
            { return COLON;
            }
          case 45: break;
          case 11: 
            { return SQUARE_L;
            }
          case 46: break;
          case 12: 
            { return SQUARE_R;
            }
          case 47: break;
          case 13: 
            { return ROUND_L;
            }
          case 48: break;
          case 14: 
            { return ROUND_R;
            }
          case 49: break;
          case 15: 
            { return SEPARATOR;
            }
          case 50: break;
          case 16: 
            { return PLUS;
            }
          case 51: break;
          case 17: 
            { return MINUS;
            }
          case 52: break;
          case 18: 
            { return TIMES;
            }
          case 53: break;
          case 19: 
            { return LABEL_DEF;
            }
          case 54: break;
          case 20: 
            { return REGISTER;
            }
          case 55: break;
          case 21: 
            { return DATA_OP;
            }
          case 56: break;
          case 22: 
            { return MNEMONIC_OP;
            }
          case 57: break;
          case 23: 
            { return DOLLARSIGN2;
            }
          case 58: break;
          case 24: 
            { return STRING;
            }
          case 59: break;
          case 25: 
            { return EQU;
            }
          case 60: break;
          case 26: 
            { return DIRECTIVE_OP;
            }
          case 61: break;
          case 27: 
            { return PREPROCESSOR_OP;
            }
          case 62: break;
          case 28: 
            { return BSS_SECTION_NAME;
            }
          case 63: break;
          case 29: 
            { return SIZE;
            }
          case 64: break;
          case 30: 
            { return CODE_SECTION_NAME;
            }
          case 65: break;
          case 31: 
            { return DATA_SECTION_NAME;
            }
          case 66: break;
          case 32: 
            { return MACRO_TAG;
            }
          case 67: break;
          case 33: 
            { return SECTION_TAG;
            }
          case 68: break;
          case 34: 
            { return DEFINE_TAG;
            }
          case 69: break;
          case 35: 
            { return INCLUDE_TAG;
            }
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
