/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.nasmlanguage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.nasmlanguage.psi.NASMTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_NASMLexer.flex</tt>
 */
public class _NASMLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\101\1\103\1\75\2\0\1\77\2\0\1\112\1\110\1\107"+
    "\1\111\1\15\1\0\1\72\1\22\1\25\1\24\1\70\1\67\1\23\1\71\1\60\1\76\1\104\1"+
    "\3\3\0\1\102\1\103\1\20\1\21\1\10\1\17\1\4\1\73\1\26\1\74\1\12\2\102\1\30"+
    "\1\27\1\14\1\13\1\32\1\5\1\31\1\7\1\11\1\6\2\102\1\16\1\33\1\102\1\105\1\100"+
    "\1\106\1\0\1\102\1\0\1\53\1\43\1\51\1\37\1\35\1\63\1\54\1\57\1\62\1\64\1\65"+
    "\1\55\1\44\1\52\1\45\1\56\1\41\1\34\1\36\1\42\1\61\1\46\1\40\1\50\1\66\1\47"+
    "\12\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\13\4\2\5\30\4\2\5"+
    "\1\4\1\1\1\6\1\1\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\3\4\1\16\17\4\1\0\1\5"+
    "\10\4\1\17\5\4\1\17\11\4\2\20\1\4\1\17"+
    "\6\4\1\21\2\4\1\17\4\4\1\21\14\4\1\17"+
    "\6\4\1\17\14\4\1\21\1\4\3\21\1\4\1\21"+
    "\1\4\1\21\3\0\3\5\1\0\1\22\3\0\1\23"+
    "\11\4\1\24\14\4\1\21\2\4\1\21\5\4\1\21"+
    "\12\4\2\21\4\4\1\21\1\4\1\24\1\4\2\21"+
    "\1\4\1\21\3\4\2\21\2\4\1\5\1\0\15\4"+
    "\1\25\11\4\1\21\2\4\1\26\1\4\1\21\2\4"+
    "\1\21\1\4\3\21\4\4\1\27\1\30\15\4\1\31"+
    "\1\21\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd"+
    "\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915"+
    "\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d"+
    "\0\u0bb8\0\u0177\0\u0c03\0\u0c4e\0\u0c99\0\113\0\u0ce4\0\113"+
    "\0\113\0\113\0\113\0\113\0\113\0\113\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\113\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df"+
    "\0\u122a\0\u1275\0\113\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec"+
    "\0\u1437\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644"+
    "\0\u168f\0\u0177\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851"+
    "\0\u189c\0\u18e7\0\u1932\0\u0177\0\u0708\0\u197d\0\u19c8\0\u1a13"+
    "\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b"+
    "\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1068\0\u1e2d\0\u1e78"+
    "\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0"+
    "\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328"+
    "\0\u2373\0\u11df\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535"+
    "\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d"+
    "\0\u278d\0\u0177\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f"+
    "\0\u04b0\0\u299a\0\u294f\0\u29e5\0\u2a30\0\u0c99\0\113\0\u2a7b"+
    "\0\u0ce4\0\u2ac6\0\u0177\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d"+
    "\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u0177\0\u2db4\0\u2dff\0\u2e4a"+
    "\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2"+
    "\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa"+
    "\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552"+
    "\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa"+
    "\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u3219\0\u39b7"+
    "\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u19c8\0\u3b79\0\u2085"+
    "\0\u286e\0\u3bc4\0\u299a\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b"+
    "\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93"+
    "\0\u3fde\0\u0177\0\u4029\0\u4074\0\u40bf\0\u410a\0\u4155\0\u41a0"+
    "\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317\0\u4362\0\u0177\0\u43ad"+
    "\0\u43f8\0\u27d8\0\u4443\0\u1770\0\u448e\0\u37aa\0\u44d9\0\u4524"+
    "\0\u456f\0\u45ba\0\u4605\0\u4650\0\u0177\0\u0177\0\u469b\0\u46e6"+
    "\0\u4731\0\u477c\0\u47c7\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e"+
    "\0\u4989\0\u49d4\0\u4a1f\0\u0177\0\u4a6a\0\u4ab5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\6\1\15\2\6\1\16\1\17"+
    "\1\20\3\21\1\22\1\23\1\24\3\6\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\6\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\6\1\21\1\46\1\47\1\50\1\51\1\6\1\52"+
    "\3\21\1\53\2\6\1\54\1\21\1\55\1\56\1\57"+
    "\1\6\1\2\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\114\0\2\3\110\0\1\4\1\0\111\4\4\0"+
    "\1\6\1\67\6\6\1\70\1\6\1\71\22\6\1\67"+
    "\6\6\1\71\1\6\1\70\24\6\3\0\2\6\1\72"+
    "\12\0\73\6\3\0\2\6\1\72\12\0\3\6\1\73"+
    "\22\6\1\74\3\6\1\73\17\6\1\74\20\6\3\0"+
    "\2\6\1\72\12\0\1\75\4\6\1\76\23\6\1\75"+
    "\4\6\1\76\34\6\3\0\2\6\1\72\12\0\7\6"+
    "\1\77\16\6\1\100\12\6\1\77\10\6\1\100\20\6"+
    "\3\0\2\6\1\72\12\0\6\6\1\101\47\6\1\101"+
    "\14\6\3\0\2\6\1\72\12\0\23\6\1\102\14\6"+
    "\1\102\32\6\3\0\2\6\1\72\12\0\25\6\1\103"+
    "\2\6\1\103\42\6\3\0\2\6\1\72\12\0\5\6"+
    "\1\104\5\6\1\105\1\6\1\106\15\6\1\105\2\6"+
    "\1\104\1\106\33\6\3\0\2\6\1\72\12\0\15\6"+
    "\1\107\6\6\1\110\12\6\1\107\11\6\1\110\21\6"+
    "\3\0\2\6\1\72\12\0\6\6\1\111\47\6\1\111"+
    "\14\6\3\0\2\6\1\72\12\0\1\112\3\0\1\112"+
    "\6\0\3\112\1\20\3\21\7\0\1\112\1\0\1\112"+
    "\3\0\1\112\5\0\1\112\1\0\1\112\3\0\1\113"+
    "\1\21\2\0\1\112\2\0\1\113\3\21\1\20\1\112"+
    "\2\0\1\21\20\0\1\112\3\0\1\112\6\0\3\112"+
    "\4\21\7\0\1\112\1\0\1\112\3\0\1\112\5\0"+
    "\1\112\1\0\1\112\3\0\1\113\1\21\2\0\1\112"+
    "\3\0\4\21\1\112\2\0\1\21\20\0\24\6\1\114"+
    "\1\115\2\6\1\115\20\6\1\114\21\6\3\0\2\6"+
    "\1\72\12\0\7\6\1\116\31\6\1\116\31\6\3\0"+
    "\2\6\1\72\12\0\6\6\1\117\47\6\1\117\14\6"+
    "\3\0\2\6\1\72\12\0\31\6\1\120\1\6\1\121"+
    "\5\6\1\122\3\6\1\123\25\6\3\0\2\6\1\72"+
    "\12\0\1\6\1\67\6\6\1\70\1\6\1\71\17\6"+
    "\1\124\1\125\1\6\1\67\1\6\1\126\4\6\1\71"+
    "\1\127\1\130\1\127\23\6\3\0\2\6\1\72\12\0"+
    "\1\75\4\6\1\76\23\6\1\131\1\132\1\6\1\133"+
    "\1\6\1\134\1\135\5\6\1\136\1\6\1\137\2\6"+
    "\1\132\1\140\1\6\1\135\1\132\3\6\1\141\10\6"+
    "\3\0\2\6\1\72\12\0\30\6\1\142\1\143\1\132"+
    "\1\144\1\145\3\144\4\6\1\132\2\6\1\146\1\6"+
    "\1\132\1\6\1\132\2\6\1\147\14\6\3\0\2\6"+
    "\1\72\12\0\41\6\1\150\31\6\3\0\2\6\1\72"+
    "\12\0\34\6\1\31\36\6\3\0\2\6\1\72\12\0"+
    "\6\6\1\101\21\6\1\151\1\152\11\6\1\153\12\6"+
    "\1\101\14\6\3\0\2\6\1\72\12\0\6\6\1\111"+
    "\22\6\1\154\1\155\3\6\1\156\2\6\1\157\1\6"+
    "\1\160\1\132\4\6\1\161\2\132\2\6\1\111\3\6"+
    "\1\162\10\6\3\0\2\6\1\72\12\0\7\6\1\116"+
    "\30\6\1\163\1\164\13\6\1\165\15\6\3\0\2\6"+
    "\1\72\12\0\25\6\1\103\2\6\1\166\24\6\1\167"+
    "\15\6\3\0\2\6\1\72\12\0\41\6\1\170\3\6"+
    "\1\171\1\6\1\172\1\6\1\173\21\6\3\0\2\6"+
    "\1\72\12\0\7\6\1\77\16\6\1\100\1\6\1\174"+
    "\1\6\1\132\1\175\1\176\1\177\1\6\1\200\1\201"+
    "\1\77\2\6\1\132\2\6\1\202\1\6\1\203\1\204"+
    "\1\132\17\6\3\0\2\6\1\72\12\0\31\6\1\205"+
    "\7\6\1\206\31\6\3\0\2\6\1\72\12\0\15\6"+
    "\1\107\6\6\1\110\6\6\1\207\3\6\1\107\4\6"+
    "\1\132\1\6\1\210\1\211\1\6\1\212\1\6\1\132"+
    "\17\6\3\0\2\6\1\72\12\0\24\6\1\114\1\115"+
    "\2\6\1\115\1\6\1\132\16\6\1\114\21\6\3\0"+
    "\2\6\1\72\12\0\6\6\1\117\22\6\1\213\2\214"+
    "\5\6\1\215\1\6\1\153\3\6\1\216\1\214\5\6"+
    "\1\117\1\214\13\6\3\0\2\6\1\72\12\0\31\6"+
    "\1\217\1\6\1\220\5\6\1\221\13\6\1\222\15\6"+
    "\3\0\2\6\1\72\12\0\3\6\1\73\22\6\1\74"+
    "\3\6\1\73\1\223\16\6\1\74\20\6\3\0\2\6"+
    "\1\72\12\0\23\6\1\102\4\6\1\224\2\6\1\225"+
    "\4\6\1\226\5\6\1\227\24\6\3\0\2\6\1\72"+
    "\12\0\32\6\1\132\40\6\3\0\2\6\1\72\12\0"+
    "\30\6\1\230\1\231\1\232\4\6\1\233\1\234\1\232"+
    "\1\6\1\232\1\6\1\235\1\236\3\233\1\237\20\6"+
    "\3\0\2\6\1\72\12\0\1\112\3\0\1\112\5\0"+
    "\1\240\3\112\1\20\3\21\7\0\1\112\1\0\1\241"+
    "\3\0\1\242\4\0\1\240\1\112\1\0\1\112\3\0"+
    "\1\243\1\21\2\0\1\112\2\0\1\244\3\21\1\20"+
    "\1\112\1\240\1\0\1\21\20\0\16\6\4\245\32\6"+
    "\1\245\6\6\4\245\3\6\1\245\3\0\2\6\1\72"+
    "\6\0\77\246\1\247\1\250\12\246\100\251\1\252\1\247"+
    "\11\251\4\0\2\6\1\253\52\6\1\253\15\6\3\0"+
    "\2\6\1\72\12\0\13\6\1\254\17\6\1\254\37\6"+
    "\3\0\2\6\1\72\12\0\5\6\1\255\20\6\1\256"+
    "\7\6\1\255\13\6\1\256\20\6\3\0\2\6\1\72"+
    "\12\0\1\257\30\6\1\257\41\6\3\0\2\6\1\72"+
    "\12\0\26\6\1\260\23\6\1\260\20\6\3\0\2\6"+
    "\1\72\12\0\4\6\1\261\15\6\1\262\22\6\1\261"+
    "\2\6\1\262\22\6\3\0\2\6\1\72\12\0\25\6"+
    "\1\263\2\6\1\263\42\6\3\0\2\6\1\72\12\0"+
    "\23\6\1\264\14\6\1\264\32\6\3\0\2\6\1\72"+
    "\12\0\2\6\1\265\52\6\1\265\15\6\3\0\2\6"+
    "\1\72\12\0\23\6\1\266\14\6\1\266\32\6\3\0"+
    "\2\6\1\72\12\0\26\6\1\256\23\6\1\256\20\6"+
    "\3\0\2\6\1\72\12\0\22\6\1\265\25\6\1\265"+
    "\22\6\3\0\2\6\1\72\12\0\1\267\30\6\1\267"+
    "\41\6\3\0\2\6\1\72\12\0\14\6\1\270\32\6"+
    "\1\270\23\6\3\0\2\6\1\72\12\0\3\6\1\271"+
    "\26\6\1\271\40\6\3\0\2\6\1\72\12\0\3\6"+
    "\1\272\26\6\1\272\40\6\3\0\2\6\1\72\12\0"+
    "\6\6\1\273\47\6\1\273\14\6\3\0\2\6\1\72"+
    "\12\0\5\6\1\274\30\6\1\274\34\6\3\0\2\6"+
    "\1\72\12\0\1\112\3\0\1\112\6\0\7\112\7\0"+
    "\1\112\1\0\1\112\3\0\1\112\5\0\1\112\1\0"+
    "\1\112\3\0\1\113\1\112\2\0\1\112\3\0\5\112"+
    "\2\0\1\112\20\0\7\6\1\275\31\6\1\275\31\6"+
    "\3\0\2\6\1\72\12\0\7\6\1\276\31\6\1\276"+
    "\31\6\3\0\2\6\1\72\12\0\13\6\1\277\17\6"+
    "\1\277\37\6\3\0\2\6\1\72\12\0\15\6\1\300"+
    "\21\6\1\300\33\6\3\0\2\6\1\72\12\0\32\6"+
    "\1\301\3\6\1\232\13\6\1\302\20\6\3\0\2\6"+
    "\1\72\12\0\30\6\1\303\1\6\1\304\40\6\3\0"+
    "\2\6\1\72\12\0\30\6\1\305\20\6\1\232\21\6"+
    "\3\0\2\6\1\72\12\0\30\6\1\232\20\6\1\232"+
    "\21\6\3\0\2\6\1\72\12\0\52\6\1\132\3\6"+
    "\1\132\14\6\3\0\2\6\1\72\12\0\44\6\1\132"+
    "\11\6\1\132\14\6\3\0\2\6\1\72\12\0\44\6"+
    "\1\132\5\6\1\132\20\6\3\0\2\6\1\72\12\0"+
    "\44\6\1\132\26\6\3\0\2\6\1\72\12\0\13\6"+
    "\1\254\17\6\1\254\2\6\1\306\34\6\3\0\2\6"+
    "\1\72\12\0\4\6\1\261\15\6\1\262\13\6\1\307"+
    "\6\6\1\261\2\6\1\262\22\6\3\0\2\6\1\72"+
    "\12\0\47\6\1\310\23\6\3\0\2\6\1\72\12\0"+
    "\16\6\4\132\3\6\1\263\2\6\1\263\2\6\1\232"+
    "\5\6\1\311\3\6\1\232\10\6\1\232\4\6\4\132"+
    "\4\6\3\0\2\6\1\72\12\0\37\6\1\232\33\6"+
    "\3\0\2\6\1\72\12\0\47\6\1\311\23\6\3\0"+
    "\2\6\1\72\12\0\30\6\1\305\20\6\1\232\1\6"+
    "\1\312\17\6\3\0\2\6\1\72\12\0\30\6\1\313"+
    "\20\6\1\313\21\6\3\0\2\6\1\72\12\0\32\6"+
    "\1\314\40\6\3\0\2\6\1\72\12\0\16\6\4\132"+
    "\43\6\2\132\4\6\3\0\2\6\1\72\12\0\45\6"+
    "\1\232\25\6\3\0\2\6\1\72\12\0\32\6\1\232"+
    "\14\6\1\232\23\6\3\0\2\6\1\72\12\0\42\6"+
    "\1\232\30\6\3\0\2\6\1\72\12\0\30\6\1\315"+
    "\42\6\3\0\2\6\1\72\12\0\17\6\2\132\42\6"+
    "\3\132\5\6\3\0\2\6\1\72\12\0\32\6\1\316"+
    "\40\6\3\0\2\6\1\72\12\0\45\6\1\317\25\6"+
    "\3\0\2\6\1\72\12\0\44\6\1\320\26\6\3\0"+
    "\2\6\1\72\12\0\30\6\1\232\3\6\1\321\22\6"+
    "\1\232\13\6\3\0\2\6\1\72\12\0\30\6\1\232"+
    "\1\6\1\232\12\6\1\232\25\6\3\0\2\6\1\72"+
    "\12\0\55\6\1\322\15\6\3\0\2\6\1\72\12\0"+
    "\53\6\1\323\17\6\3\0\2\6\1\72\12\0\32\6"+
    "\1\324\40\6\3\0\2\6\1\72\12\0\36\6\1\325"+
    "\34\6\3\0\2\6\1\72\12\0\16\6\4\132\41\6"+
    "\4\132\4\6\3\0\2\6\1\72\12\0\13\6\1\277"+
    "\17\6\1\277\6\6\1\326\30\6\3\0\2\6\1\72"+
    "\12\0\51\6\1\305\21\6\3\0\2\6\1\72\12\0"+
    "\36\6\1\327\34\6\3\0\2\6\1\72\12\0\30\6"+
    "\1\232\42\6\3\0\2\6\1\72\12\0\53\6\1\205"+
    "\17\6\3\0\2\6\1\72\12\0\33\6\1\330\37\6"+
    "\3\0\2\6\1\72\12\0\47\6\1\331\23\6\3\0"+
    "\2\6\1\72\12\0\16\6\1\132\1\6\2\132\23\6"+
    "\1\332\16\6\1\132\1\6\1\132\4\6\3\0\2\6"+
    "\1\72\12\0\35\6\1\233\35\6\3\0\2\6\1\72"+
    "\12\0\33\6\1\233\37\6\3\0\2\6\1\72\12\0"+
    "\41\6\1\232\31\6\3\0\2\6\1\72\12\0\34\6"+
    "\1\232\36\6\3\0\2\6\1\72\12\0\41\6\1\333"+
    "\3\6\1\232\4\6\1\334\20\6\3\0\2\6\1\72"+
    "\12\0\51\6\1\335\21\6\3\0\2\6\1\72\12\0"+
    "\33\6\1\232\11\6\1\232\10\6\1\232\14\6\3\0"+
    "\2\6\1\72\12\0\2\6\1\265\52\6\1\336\15\6"+
    "\3\0\2\6\1\72\12\0\50\6\1\232\22\6\3\0"+
    "\2\6\1\72\12\0\36\6\1\232\13\6\1\232\20\6"+
    "\3\0\2\6\1\72\12\0\33\6\1\232\5\6\1\337"+
    "\3\6\1\305\25\6\3\0\2\6\1\72\12\0\33\6"+
    "\1\340\37\6\3\0\2\6\1\72\12\0\32\6\2\232"+
    "\4\6\1\232\6\6\1\232\23\6\3\0\2\6\1\72"+
    "\12\0\32\6\1\232\14\6\1\341\23\6\3\0\2\6"+
    "\1\72\12\0\32\6\1\232\40\6\3\0\2\6\1\72"+
    "\12\0\33\6\1\311\5\6\1\342\31\6\3\0\2\6"+
    "\1\72\12\0\53\6\1\312\17\6\3\0\2\6\1\72"+
    "\12\0\44\6\1\316\26\6\3\0\2\6\1\72\12\0"+
    "\31\6\1\234\41\6\3\0\2\6\1\72\12\0\52\6"+
    "\1\343\20\6\3\0\2\6\1\72\12\0\32\6\1\344"+
    "\40\6\3\0\2\6\1\72\12\0\21\6\1\232\51\6"+
    "\3\0\2\6\1\72\12\0\31\6\1\345\41\6\3\0"+
    "\2\6\1\72\12\0\56\6\1\346\14\6\3\0\2\6"+
    "\1\72\12\0\26\6\1\256\23\6\1\256\2\6\1\335"+
    "\15\6\3\0\2\6\1\72\12\0\32\6\1\347\3\6"+
    "\1\350\6\6\1\232\25\6\3\0\2\6\1\72\12\0"+
    "\45\6\1\351\25\6\3\0\2\6\1\72\12\0\31\6"+
    "\1\232\41\6\3\0\2\6\1\72\12\0\52\6\1\232"+
    "\20\6\3\0\2\6\1\72\12\0\44\6\1\352\26\6"+
    "\3\0\2\6\1\72\12\0\31\6\2\232\4\6\1\233"+
    "\1\6\1\232\1\6\1\232\1\6\1\232\1\6\3\233"+
    "\1\232\20\6\3\0\2\6\1\72\12\0\31\6\1\232"+
    "\7\6\1\232\31\6\3\0\2\6\1\72\12\0\1\243"+
    "\3\0\1\243\6\0\7\243\7\0\1\243\1\0\1\243"+
    "\3\0\1\243\5\0\1\243\1\0\1\243\4\0\1\243"+
    "\2\0\1\243\3\0\5\243\2\0\1\243\20\0\1\112"+
    "\3\0\1\112\6\0\3\112\1\353\3\112\7\0\1\112"+
    "\1\0\1\112\3\0\1\112\5\0\1\112\1\0\1\112"+
    "\3\0\1\113\1\112\2\0\1\112\3\0\3\112\1\353"+
    "\1\112\2\0\1\112\36\0\1\354\47\0\1\354\24\0"+
    "\1\245\3\6\1\245\6\6\7\245\7\6\1\245\1\6"+
    "\1\245\3\6\1\245\5\6\1\245\1\6\1\245\4\6"+
    "\1\245\2\6\1\245\3\6\5\245\2\6\1\245\3\0"+
    "\2\6\1\72\6\0\1\246\1\0\111\246\1\251\1\0"+
    "\111\251\4\0\3\6\1\355\26\6\1\355\40\6\3\0"+
    "\2\6\1\72\12\0\1\356\30\6\1\356\41\6\3\0"+
    "\2\6\1\72\12\0\7\6\1\357\31\6\1\357\31\6"+
    "\3\0\2\6\1\72\12\0\16\6\1\360\1\6\1\361"+
    "\52\6\3\0\2\6\1\72\12\0\1\362\30\6\1\362"+
    "\41\6\3\0\2\6\1\72\12\0\5\6\1\363\30\6"+
    "\1\363\34\6\3\0\2\6\1\72\12\0\23\6\1\364"+
    "\14\6\1\364\32\6\3\0\2\6\1\72\12\0\2\6"+
    "\1\365\52\6\1\365\15\6\3\0\2\6\1\72\12\0"+
    "\23\6\1\366\14\6\1\366\32\6\3\0\2\6\1\72"+
    "\12\0\1\367\30\6\1\367\41\6\3\0\2\6\1\72"+
    "\12\0\12\6\1\370\31\6\1\370\26\6\3\0\2\6"+
    "\1\72\12\0\5\6\1\371\30\6\1\371\34\6\3\0"+
    "\2\6\1\72\12\0\3\6\1\372\26\6\1\372\40\6"+
    "\3\0\2\6\1\72\12\0\7\6\1\373\31\6\1\373"+
    "\31\6\3\0\2\6\1\72\12\0\22\6\1\374\25\6"+
    "\1\374\22\6\3\0\2\6\1\72\12\0\3\6\1\265"+
    "\26\6\1\265\40\6\3\0\2\6\1\72\12\0\15\6"+
    "\1\375\21\6\1\375\33\6\3\0\2\6\1\72\12\0"+
    "\2\6\1\376\52\6\1\376\15\6\3\0\2\6\1\72"+
    "\12\0\2\6\1\377\52\6\1\377\15\6\3\0\2\6"+
    "\1\72\12\0\25\6\1\u0100\2\6\1\u0100\42\6\3\0"+
    "\2\6\1\72\12\0\33\6\5\144\33\6\3\0\2\6"+
    "\1\72\12\0\31\6\1\232\11\6\1\232\2\6\1\u0101"+
    "\24\6\3\0\2\6\1\72\12\0\47\6\1\322\23\6"+
    "\3\0\2\6\1\72\12\0\31\6\1\u0102\41\6\3\0"+
    "\2\6\1\72\12\0\44\6\1\232\26\6\3\0\2\6"+
    "\1\72\12\0\31\6\1\170\41\6\3\0\2\6\1\72"+
    "\12\0\31\6\2\232\4\6\1\233\1\6\1\232\1\6"+
    "\1\232\1\6\1\232\1\236\3\233\1\237\20\6\3\0"+
    "\2\6\1\72\12\0\52\6\1\u0103\20\6\3\0\2\6"+
    "\1\72\12\0\32\6\1\u0104\40\6\3\0\2\6\1\72"+
    "\12\0\57\6\1\232\13\6\3\0\2\6\1\72\12\0"+
    "\33\6\1\232\10\6\1\232\26\6\3\0\2\6\1\72"+
    "\12\0\30\6\1\u0105\14\6\1\u0106\25\6\3\0\2\6"+
    "\1\72\12\0\33\6\1\u0107\37\6\3\0\2\6\1\72"+
    "\12\0\36\6\1\232\34\6\3\0\2\6\1\72\12\0"+
    "\46\6\1\316\24\6\3\0\2\6\1\72\12\0\36\6"+
    "\1\170\34\6\3\0\2\6\1\72\12\0\47\6\1\234"+
    "\23\6\3\0\2\6\1\72\12\0\46\6\1\330\24\6"+
    "\3\0\2\6\1\72\12\0\56\6\1\232\14\6\3\0"+
    "\2\6\1\72\12\0\30\6\1\232\7\6\1\u0108\15\6"+
    "\1\232\14\6\3\0\2\6\1\72\12\0\31\6\1\u0107"+
    "\41\6\3\0\2\6\1\72\12\0\32\6\1\u0109\4\6"+
    "\1\u010a\3\6\1\337\2\6\1\u010b\24\6\3\0\2\6"+
    "\1\72\12\0\32\6\1\347\40\6\3\0\2\6\1\72"+
    "\12\0\33\6\1\232\37\6\3\0\2\6\1\72\12\0"+
    "\36\6\1\u010c\34\6\3\0\2\6\1\72\12\0\20\6"+
    "\1\223\52\6\3\0\2\6\1\72\12\0\42\6\1\307"+
    "\30\6\3\0\2\6\1\72\12\0\32\6\1\u0104\11\6"+
    "\1\u010d\26\6\3\0\2\6\1\72\12\0\51\6\1\232"+
    "\21\6\3\0\2\6\1\72\12\0\56\6\1\330\14\6"+
    "\3\0\2\6\1\72\12\0\46\6\1\232\24\6\3\0"+
    "\2\6\1\72\12\0\42\6\1\u010a\30\6\3\0\2\6"+
    "\1\72\12\0\52\6\1\302\20\6\3\0\2\6\1\72"+
    "\12\0\45\6\1\317\1\6\1\u010e\7\6\1\u010f\13\6"+
    "\3\0\2\6\1\72\12\0\53\6\1\u0110\17\6\3\0"+
    "\2\6\1\72\12\0\36\6\1\u010f\34\6\3\0\2\6"+
    "\1\72\12\0\33\6\2\232\2\6\1\232\33\6\3\0"+
    "\2\6\1\72\12\0\43\6\1\232\27\6\3\0\2\6"+
    "\1\72\30\0\1\354\20\0\1\113\26\0\1\354\24\0"+
    "\5\6\1\76\30\6\1\76\34\6\3\0\2\6\1\72"+
    "\12\0\25\6\1\374\2\6\1\374\42\6\3\0\2\6"+
    "\1\72\12\0\25\6\1\u0111\2\6\1\u0111\42\6\3\0"+
    "\2\6\1\72\12\0\17\6\1\265\53\6\3\0\2\6"+
    "\1\72\12\0\21\6\1\265\51\6\3\0\2\6\1\72"+
    "\12\0\25\6\1\u0112\2\6\1\u0112\42\6\3\0\2\6"+
    "\1\72\12\0\6\6\1\u0113\47\6\1\u0113\14\6\3\0"+
    "\2\6\1\72\12\0\1\u0114\30\6\1\u0114\41\6\3\0"+
    "\2\6\1\72\12\0\4\6\1\265\40\6\1\265\25\6"+
    "\3\0\2\6\1\72\12\0\7\6\1\374\31\6\1\374"+
    "\31\6\3\0\2\6\1\72\12\0\3\6\1\144\26\6"+
    "\1\144\40\6\3\0\2\6\1\72\12\0\5\6\1\u0115"+
    "\30\6\1\u0115\34\6\3\0\2\6\1\72\12\0\14\6"+
    "\1\u0116\32\6\1\u0116\23\6\3\0\2\6\1\72\12\0"+
    "\24\6\1\u0117\24\6\1\u0117\21\6\3\0\2\6\1\72"+
    "\12\0\10\6\1\265\35\6\1\265\24\6\3\0\2\6"+
    "\1\72\12\0\14\6\1\u0118\32\6\1\u0118\23\6\3\0"+
    "\2\6\1\72\12\0\26\6\1\265\23\6\1\265\20\6"+
    "\3\0\2\6\1\72\12\0\24\6\1\u0119\24\6\1\u0119"+
    "\21\6\3\0\2\6\1\72\12\0\14\6\1\u011a\32\6"+
    "\1\u011a\23\6\3\0\2\6\1\72\12\0\31\6\1\232"+
    "\11\6\1\232\27\6\3\0\2\6\1\72\12\0\31\6"+
    "\1\330\41\6\3\0\2\6\1\72\12\0\50\6\1\214"+
    "\22\6\3\0\2\6\1\72\12\0\33\6\3\232\1\6"+
    "\1\232\33\6\3\0\2\6\1\72\12\0\31\6\1\316"+
    "\41\6\3\0\2\6\1\72\12\0\47\6\1\202\23\6"+
    "\3\0\2\6\1\72\12\0\32\6\1\u011b\40\6\3\0"+
    "\2\6\1\72\12\0\33\6\3\232\1\6\1\232\4\6"+
    "\1\u010e\26\6\3\0\2\6\1\72\12\0\36\6\1\u011c"+
    "\34\6\3\0\2\6\1\72\12\0\45\6\1\u011d\25\6"+
    "\3\0\2\6\1\72\12\0\33\6\1\232\1\6\1\232"+
    "\35\6\3\0\2\6\1\72\12\0\47\6\1\u010e\7\6"+
    "\1\u010f\13\6\3\0\2\6\1\72\12\0\5\6\1\265"+
    "\30\6\1\265\34\6\3\0\2\6\1\72\12\0\4\6"+
    "\1\u011e\40\6\1\u011e\25\6\3\0\2\6\1\72\12\0"+
    "\7\6\1\u011f\31\6\1\u011f\31\6\3\0\2\6\1\72"+
    "\12\0\10\6\1\u0111\35\6\1\u0111\24\6\3\0\2\6"+
    "\1\72\12\0\2\6\1\u0120\52\6\1\u0120\15\6\3\0"+
    "\2\6\1\72\12\0\24\6\1\265\24\6\1\265\21\6"+
    "\3\0\2\6\1\72\12\0\1\265\30\6\1\265\41\6"+
    "\3\0\2\6\1\72\12\0\25\6\1\u0121\2\6\1\u0121"+
    "\42\6\3\0\2\6\1\72\12\0\61\6\1\232\11\6"+
    "\3\0\2\6\1\72\12\0\35\6\1\232\35\6\3\0"+
    "\2\6\1\72\12\0\53\6\1\u0122\17\6\3\0\2\6"+
    "\1\72\12\0\14\6\1\u0123\32\6\1\u0123\23\6\3\0"+
    "\2\6\1\72\12\0\10\6\1\u0124\35\6\1\u0124\24\6"+
    "\3\0\2\6\1\72\12\0\5\6\1\u0119\30\6\1\u0119"+
    "\34\6\3\0\2\6\1\72\12\0\27\6\1\265\32\6"+
    "\1\265\10\6\3\0\2\6\1\72\12\0\50\6\1\u0125"+
    "\22\6\3\0\2\6\1\72\12\0\3\6\1\u0119\26\6"+
    "\1\u0119\40\6\3\0\2\6\1\72\12\0\16\6\1\u0126"+
    "\35\6\1\135\16\6\3\0\2\6\1\72\12\0\17\6"+
    "\1\135\53\6\3\0\2\6\1\72\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\53\1\1\11\1\1\7\11\3\1\1\11"+
    "\17\1\1\0\1\11\124\1\3\0\3\1\1\0\1\11"+
    "\3\0\101\1\1\0\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _NASMLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NASMLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 26: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 27: break;
          case 3: 
            { return COMMENT;
            }
          case 28: break;
          case 4: 
            { return LABEL;
            }
          case 29: break;
          case 5: 
            { return NUMBER;
            }
          case 30: break;
          case 6: 
            { return DIVIDE;
            }
          case 31: break;
          case 7: 
            { return COLON;
            }
          case 32: break;
          case 8: 
            { return SQUARE_L;
            }
          case 33: break;
          case 9: 
            { return SQUARE_R;
            }
          case 34: break;
          case 10: 
            { return SEPARATOR;
            }
          case 35: break;
          case 11: 
            { return PLUS;
            }
          case 36: break;
          case 12: 
            { return MINUS;
            }
          case 37: break;
          case 13: 
            { return TIMES;
            }
          case 38: break;
          case 14: 
            { return LABEL_DEF;
            }
          case 39: break;
          case 15: 
            { return REGISTER;
            }
          case 40: break;
          case 16: 
            { return DATA_OP;
            }
          case 41: break;
          case 17: 
            { return MNEMONIC_OP;
            }
          case 42: break;
          case 18: 
            { return STRING;
            }
          case 43: break;
          case 19: 
            { return EQU;
            }
          case 44: break;
          case 20: 
            { return DIRECTIVE_OP;
            }
          case 45: break;
          case 21: 
            { return BSS_SECTION_NAME;
            }
          case 46: break;
          case 22: 
            { return SIZE;
            }
          case 47: break;
          case 23: 
            { return CODE_SECTION_NAME;
            }
          case 48: break;
          case 24: 
            { return DATA_SECTION_NAME;
            }
          case 49: break;
          case 25: 
            { return SECTION_TAG;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
